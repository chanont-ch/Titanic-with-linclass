import pandas as pd
import numpy as np
import tensorflow as tf

from sklearn.model_selection import train_test_split

df = pd.read_csv("titanic.csv")
#df.head(n=8)

train_df = df.drop(["PassengerId","Name","Ticket"], axis=1)
#print (train_df.isnull().sum())

male_mean_age = train_df[train_df["Sex"]=="male"]["Age"].mean()
female_mean_age = train_df[train_df["Sex"]=="female"]["Age"].mean()
#print ("female mean age: %1.0f" %female_mean_age )
#print ("male mean age: %1.0f" %male_mean_age )

train_df.loc[ (train_df["Sex"]=="male") & (train_df["Age"].isnull()), "Age"] = male_mean_age
train_df.loc[ (train_df["Sex"]=="female") & (train_df["Age"].isnull()), "Age"] = female_mean_age
train_df["Cabin"] = train_df["Cabin"].fillna("X")
train_df["Embarked"] = train_df["Embarked"].fillna("S")
#print (train_df.isnull().sum())

y = train_df.Survived
x = train_df.drop(['Survived'],axis=1)
X_train, X_test, y_train, y_test = train_test_split(x, y, train_size=0.75, random_state=101)

#numeric feature names
pclass_feature = tf.feature_column.numeric_column('Pclass')
parch_feature = tf.feature_column.numeric_column('Parch')
fare_feature = tf.feature_column.numeric_column('Fare')
age_feature = tf.feature_column.numeric_column('Age')

#defining buckets for children, teens, adults and elders.
age_bucket_feature = tf.feature_column.bucketized_column(age_feature,[12,21,60])

#defining a categorical column with predefined values
sex_feature = tf.feature_column.categorical_column_with_vocabulary_list('Sex',['female','male'])

#defining a categorical columns with dynamic values
embarked_feature =  tf.feature_column.categorical_column_with_hash_bucket('Embarked', 3)
cabin_feature =  tf.feature_column.categorical_column_with_hash_bucket('Cabin', 100)

feature_columns = [pclass_feature, parch_feature, fare_feature, age_feature, age_bucket_feature, sex_feature, embarked_feature, cabin_feature]

def train_input_fn(features, labels, epochs, shuffle=True, batch_size = 32):
    def input_function():
        dataset = tf.data.Dataset.from_tensor_slices((dict(features), labels))
        if shuffle:
            dataset.shuffle(100)
        dataset = dataset.batch(batch_size).repeat(epochs)
        return dataset
    return input_function

def eval_input_fn(features, labels = None, batch_size = 32):
    def input_function():
        input_features = dict(features)
        if labels is None:
            inputs = input_features 
        else:
            inputs = (input_features, labels)
        
        dataset = tf.data.Dataset.from_tensor_slices(inputs)
        dataset = dataset.batch(batch_size)
        return dataset
    return input_function
    
    train_input_fn = train_input_fn(X_train, y_train, epochs=None)
    
    LinearClassifier = tf.estimator.LinearClassifier(feature_columns=feature_columns)
    LinearClassifier.train(input_fn = train_input_fn,steps=2000)
    eval_input_fn = eval_input_fn(X_test, y_test)
    LinearClassifier.evaluate(input_fn = eval_input_fn)
    pred = list(LinearClassifier.predict(input_fn = eval_input_fn))
